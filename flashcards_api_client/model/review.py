# coding: utf-8

"""
    Flashcards API

    API Docs for flashcards-server  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from flashcards_api_client import schemas  # noqa: F401


class Review(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "datetime",
            "id",
            "card_id",
            "algorithm",
        }
        
        class properties:
            id = schemas.UUIDSchema
            card_id = schemas.UUIDSchema
            algorithm = schemas.StrSchema
            datetime = schemas.DateTimeSchema
            result = schemas.AnyTypeSchema
            __annotations__ = {
                "id": id,
                "card_id": card_id,
                "algorithm": algorithm,
                "datetime": datetime,
                "result": result,
            }
    
    datetime: MetaOapg.properties.datetime
    id: MetaOapg.properties.id
    card_id: MetaOapg.properties.card_id
    algorithm: MetaOapg.properties.algorithm
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["card_id"]) -> MetaOapg.properties.card_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["algorithm"]) -> MetaOapg.properties.algorithm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datetime"]) -> MetaOapg.properties.datetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["result"]) -> MetaOapg.properties.result: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "card_id", "algorithm", "datetime", "result", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["card_id"]) -> MetaOapg.properties.card_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["algorithm"]) -> MetaOapg.properties.algorithm: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datetime"]) -> MetaOapg.properties.datetime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["result"]) -> typing.Union[MetaOapg.properties.result, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "card_id", "algorithm", "datetime", "result", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        datetime: typing.Union[MetaOapg.properties.datetime, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        card_id: typing.Union[MetaOapg.properties.card_id, str, uuid.UUID, ],
        algorithm: typing.Union[MetaOapg.properties.algorithm, str, ],
        result: typing.Union[MetaOapg.properties.result, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Review':
        return super().__new__(
            cls,
            *_args,
            datetime=datetime,
            id=id,
            card_id=card_id,
            algorithm=algorithm,
            result=result,
            _configuration=_configuration,
            **kwargs,
        )
