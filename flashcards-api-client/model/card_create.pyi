# coding: utf-8

"""
    Flashcards API

    API Docs for flashcards-server  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from flashcards-api-client import schemas  # noqa: F401


class CardCreate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "answer_id",
            "question_id",
        }
        
        class properties:
            question_id = schemas.UUIDSchema
            answer_id = schemas.UUIDSchema
            
            
            class question_context_facts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.UUIDSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, uuid.UUID, ]], typing.List[typing.Union[MetaOapg.items, str, uuid.UUID, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'question_context_facts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class answer_context_facts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.UUIDSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, uuid.UUID, ]], typing.List[typing.Union[MetaOapg.items, str, uuid.UUID, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'answer_context_facts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TagCreate']:
                        return TagCreate
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TagCreate'], typing.List['TagCreate']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TagCreate':
                    return super().__getitem__(i)
            __annotations__ = {
                "question_id": question_id,
                "answer_id": answer_id,
                "question_context_facts": question_context_facts,
                "answer_context_facts": answer_context_facts,
                "tags": tags,
            }
    
    answer_id: MetaOapg.properties.answer_id
    question_id: MetaOapg.properties.question_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["question_id"]) -> MetaOapg.properties.question_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["answer_id"]) -> MetaOapg.properties.answer_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["question_context_facts"]) -> MetaOapg.properties.question_context_facts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["answer_context_facts"]) -> MetaOapg.properties.answer_context_facts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["question_id", "answer_id", "question_context_facts", "answer_context_facts", "tags", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["question_id"]) -> MetaOapg.properties.question_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["answer_id"]) -> MetaOapg.properties.answer_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["question_context_facts"]) -> typing.Union[MetaOapg.properties.question_context_facts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["answer_context_facts"]) -> typing.Union[MetaOapg.properties.answer_context_facts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["question_id", "answer_id", "question_context_facts", "answer_context_facts", "tags", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        answer_id: typing.Union[MetaOapg.properties.answer_id, str, uuid.UUID, ],
        question_id: typing.Union[MetaOapg.properties.question_id, str, uuid.UUID, ],
        question_context_facts: typing.Union[MetaOapg.properties.question_context_facts, list, tuple, schemas.Unset] = schemas.unset,
        answer_context_facts: typing.Union[MetaOapg.properties.answer_context_facts, list, tuple, schemas.Unset] = schemas.unset,
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CardCreate':
        return super().__new__(
            cls,
            *_args,
            answer_id=answer_id,
            question_id=question_id,
            question_context_facts=question_context_facts,
            answer_context_facts=answer_context_facts,
            tags=tags,
            _configuration=_configuration,
            **kwargs,
        )

from flashcards-api-client.model.tag_create import TagCreate
